<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.oreo5.mapper.AdminMapper" >
  <resultMap id="BaseResultMap" type="cn.oreo5.entity.PO.Admin" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="register_time" property="registerTime" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, password, email, status, register_time
  </sql>
  <resultMap id="adminAndRole" type="cn.oreo5.entity.PO.Admin">
    <id column="aid" property="id"/>
    <result column="aname" property="name"/>
    <result column="password" property="password"/>
    <result column="email" property="email"/>
    <result column="status" property="status"/>
    <result column="register_time" property="registerTime"/>
    <collection property="roleList" ofType="cn.oreo5.entity.PO.Role">
      <id column="rid" property="id"/>
      <result column="rname" property="name"/>
      <result column="description" property="description"/>
    </collection>
  </resultMap>
  <select id="selectAdminWithRoleById" resultMap="adminAndRole">
    select t_admin.id aid,t_admin.name aname,t_admin.password,t_admin.email,t_admin.status,t_admin.register_time,
    t_role.id rid,t_role.name rname,t_role.description
    from t_admin
    left join inner_admin_role on t_admin.id = inner_admin_role.admin_id
    left join t_role on inner_admin_role.role_id = t_role.id
    where t_admin.id=#{adminId}
  </select>
  <select id="selectAdminWithRoleByKeyword" resultMap="adminAndRole">
    select t_admin.id aid,t_admin.name aname,t_admin.password,t_admin.email,t_admin.status,t_admin.register_time,
    t_role.id rid,t_role.name rname,t_role.description
    from t_admin
    left join inner_admin_role on t_admin.id = inner_admin_role.admin_id
    left join t_role on inner_admin_role.role_id = t_role.id
    where t_admin.name like concat("%",#{id},"%")
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.oreo5.entity.PO.AdminExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_admin
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_admin
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteAdminRoleRelationship" parameterType="java.util.List">
    delete from inner_admin_role where 1>2
        or admin_id in
    <foreach collection="adminIdList" item="adminId" open="(" separator="," close=")">#{adminId}</foreach>
  </delete>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_admin
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.oreo5.entity.PO.AdminExample" >
    delete from t_admin
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertAdminRoleRelationship">
    insert into inner_admin_role(admin_id,role_id) values
    <foreach collection="roleIdList" item="roleId" separator=",">(#{adminId},#{roleId})</foreach>
  </insert>
  <insert id="insert" parameterType="cn.oreo5.entity.PO.Admin" >
    insert into t_admin (id, name, password, 
      email, status, register_time
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{registerTime,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.oreo5.entity.PO.Admin" >
    insert into t_admin
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="registerTime != null" >
        register_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null" >
        #{registerTime,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.oreo5.entity.PO.AdminExample" resultType="java.lang.Integer" >
    select count(*) from t_admin
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_admin
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.registerTime != null" >
        register_time = #{record.registerTime,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_admin
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      register_time = #{record.registerTime,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.oreo5.entity.PO.Admin" >
    update t_admin
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null" >
        register_time = #{registerTime,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.oreo5.entity.PO.Admin" >
    update t_admin
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      register_time = #{registerTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>